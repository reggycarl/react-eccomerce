{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/react/react-eccomerce/src/ShoppingCart.jsx\";\nimport React, { Component } from \"react\";\nimport Product from \"./Product\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class ShoppingCart extends Component {\n  constructor(props) {\n    console.log(\"inside of constructor\");\n    super(props);\n\n    this.componentDidMount = async () => {\n      // accepts http request\n      //console.log(\"inside of component did mount\")\n      var response = await fetch(\"http://localhost:5000/products\", {\n        method: \"GET\"\n      });\n      var prods = await response.json();\n      this.setState({\n        products: prods\n      });\n      console.log(prods);\n    };\n\n    this.handleincrement = (product, maxValue) => {\n      let allPorduct = [...this.state.products];\n      let index = allPorduct.indexOf(product); //updating the state of the component by using setstate \n\n      if (allPorduct[index].quantity < maxValue) {\n        allPorduct[index].quantity++;\n        this.setState({\n          products: allPorduct\n        });\n      }\n\n      console.log(allPorduct[index]);\n    };\n\n    this.handledelete = product => {\n      let allPorduct = [...this.state.products];\n      let index = allPorduct.indexOf(product);\n\n      if (window.confirm(\"Are you sure you want to delete\")) {\n        allPorduct.splice(index, 1);\n        this.setState({\n          products: allPorduct\n        });\n      } // delete product using index\n      //updating the state of the component by using setstate\n\n    };\n\n    this.handledecrement = (product, minValue) => {\n      let allPorduct = [...this.state.products];\n      let index = allPorduct.indexOf(product); //updating the state of the component by using setstate\n\n      if (allPorduct[index].quantity > minValue) {\n        allPorduct[index].quantity--;\n        this.setState({\n          products: allPorduct\n        });\n      }\n\n      console.log(\"handleIncrement\", product, index);\n    };\n\n    this.state = {\n      products: []\n    };\n  }\n\n  render() {\n    console.log(\"inside render\"); // passing information from parent to child class using props \n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-fluid\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"shopping cart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: this.state.products.map(prod => {\n          return /*#__PURE__*/_jsxDEV(Product, {\n            id: prod.id,\n            productName: prod.productName,\n            price: prod.price,\n            quantity: prod.quantity,\n            product: prod,\n            photo: prod.photo,\n            onincrement: this.handleincrement,\n            ondecrement: this.handledecrement,\n            onDelete: this.handledelete,\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-primary\",\n              children: \"Buy Now\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 29,\n              columnNumber: 16\n            }, this)\n          }, prod.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 20\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 12\n    }, this);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // accepts http request\n    console.log(\"inside of component did update\", prevState, this.props, this.state, prevState);\n  }\n\n  componentWillUnmount() {\n    console.log(\"inside of component did will unmount\");\n  } // getting all products then updating the state with a js method\n\n\n}","map":{"version":3,"sources":["/Users/mac/Desktop/react/react-eccomerce/src/ShoppingCart.jsx"],"names":["React","Component","Product","ShoppingCart","constructor","props","console","log","componentDidMount","response","fetch","method","prods","json","setState","products","handleincrement","product","maxValue","allPorduct","state","index","indexOf","quantity","handledelete","window","confirm","splice","handledecrement","minValue","render","map","prod","id","productName","price","photo","componentDidUpdate","prevProps","prevState","componentWillUnmount"],"mappings":"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","sourcesContent":["import React,{Component} from \"react\";\nimport Product from \"./Product\";\n\nexport default class ShoppingCart extends Component{\n   constructor(props) {\n       console.log(\"inside of constructor\")\n       super(props);\n   this.state = {\n        products:[\n           \n        ]\n    }\n   }\n    \nrender(){\n    console.log(\"inside render\")\n\n    // passing information from parent to child class using props \n    return <div className=\"container-fluid\">\n        <h4>\n            shopping cart\n        </h4>\n        <div className=\"row\">\n        {this.state.products.map((prod) =>{\n            return <Product key ={prod.id}id={prod.id} productName={prod.productName} \n            price={prod.price} quantity={prod.quantity} product={prod} photo={prod.photo}\n            onincrement={this.handleincrement} ondecrement={this.handledecrement} \n            onDelete ={this.handledelete}>\n               <button className=\"btn btn-primary\">Buy Now</button>\n            </Product>\n        })}\n        </div>\n    </div>\n}\ncomponentDidUpdate(prevProps,prevState) { \n    // accepts http request\n    console.log(\"inside of component did update\"\n    ,prevState,\n    this.props,this.state ,prevState)\n\n}\ncomponentDidMount= async()=>{\n    // accepts http request\n    //console.log(\"inside of component did mount\")\n var response =await fetch(\"http://localhost:5000/products\",{method: \"GET\"})\n  var prods = await response.json()\n  this.setState({products: prods})\n console.log(prods)\n}\ncomponentWillUnmount(){\n    console.log(\"inside of component did will unmount\")\n\n}\n\n// getting all products then updating the state with a js method\nhandleincrement =(product,maxValue) =>{\n    let allPorduct =[...this.state.products]\n    let index= allPorduct.indexOf(product)\n    \n//updating the state of the component by using setstate \nif(allPorduct[index].quantity < maxValue){\n    allPorduct[index].quantity++\n    this.setState({products:allPorduct})\n}\n   \n    \n   \n    console.log(allPorduct[index])\n    }\n// getting all products then updating the state with a js method\nhandledelete =(product) =>{\n    let allPorduct =[...this.state.products]\n    let index= allPorduct.indexOf(product)\n    if(window.confirm(\"Are you sure you want to delete\")){\n        allPorduct.splice(index, 1)\n        this.setState({products: allPorduct})\n\n\n    }\n    // delete product using index\n     //updating the state of the component by using setstate\n\n\n}\n\nhandledecrement =(product,minValue) =>{\n    \n    let allPorduct =[...this.state.products]\n    let index= allPorduct.indexOf(product)\n //updating the state of the component by using setstate\n if(allPorduct[index].quantity > minValue){\n    allPorduct[index].quantity--\n    this.setState({products: allPorduct})\n }\n    \n     \n    console.log(\"handleIncrement\",product,index)\n    \n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}